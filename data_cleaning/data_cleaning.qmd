# Purpose
The purpose of this file is to ensure the data is in the appropriate format for
creating the dashboard in a visually appealing and meaningful way.

# Load Libraries
```{r, include = FALSE}
library(here)
library(dplyr)
library(readxl)
library(tidyr)
library(zipcodeR)
library(tigris)
library(sf)
library(forcats)
```

# Load data
```{r, include=FALSE}
# Program category sheet
cat_data <- readxl::read_xlsx(
  here::here("data", "community_resources_map_data.xlsx"), 
  sheet = "program_categories")

# Program information sheet
add_data <- readxl::read_xlsx(
  here::here("data", "community_resources_map_data.xlsx"),
  sheet = "program_info")

# Demographics sheet
demo_data <- readxl::read_xlsx(
  here::here("data", "community_resources_map_data.xlsx"), 
  sheet = "demographics")

# Lists of main and subcategories
cat_list <- read.csv(here::here("data", "all_categories.csv")) %>% 
  mutate(
    main_category = gsub("\n", "", main_category)
  )
```

# Clean Data and add new variables

## Clean the address data 
```{r, include=FALSE}
add_data <- add_data %>% 
  select(program, address) %>%
  # Split the address data to obtain separate columns for each element
   tidyr::separate_wider_delim(address, delim = ",", 
                               names = c("street_address", "city", "state", 
                                         "zipcode")) %>%
  # Remove blank space next to zip codes.
  mutate(
    zipcode = gsub(" ", "", zipcode, fixed = TRUE)
  )
```

## Get geographical mapping data based on address zip codes
```{r}
# Generate logitude and latitude data for each zipcode
long_lat <- geocode_zip(add_data$zipcode)

# Manually add missing long and lat values for zipcode 78767
long_lat[4,2] <- 30.269806126148378 
long_lat[4,3] <- -97.73965108465788


# Combine the long lat data with the rest of the address data
add_data <- add_data %>% left_join(., long_lat, by = "zipcode")
```

```{r, include=FALSE}
# Get boundary shape data for the zipcodes
add_data <- zctas(cb = T, starts_with = "787", class = "sf", year = 2020) %>%
  select(zipcode = starts_with("ZCTA"), geometry) %>% right_join(., add_data, 
                                                                 by = "zipcode" 
                                                                 ) %>%
  relocate(zipcode, .after = "state")
```

## Clean the program category data
```{r, include=FALSE}
cat_data <- cat_data %>% 
  rowwise() %>%
  mutate(
    # Make each category string have 16 characters per line
    f_main_category = paste(strwrap(main_category, 16), collapse="\n"), 
    # Remove new line spaces
    sub_category = gsub("\r\n", "", sub_category),
    # Reorder factor levels of intercepts
    intercept = fct_reorder(intercept, intercept_code)
    )
```

## Create variables for counts of programs for different categorizing methods.
```{r}
count_data <- cat_data %>%
  # Create count by main category column
  group_by(main_category) %>%
  mutate(
    count_by_main = n()
  ) %>% relocate(count_by_main, .after = main_category) %>%
  # Create count by subcategory column
  group_by(main_category, sub_category) %>%
  mutate(
    count_by_sub = n()
  ) %>% relocate(count_by_sub, .after = sub_category) %>%
  ungroup() %>%
  # Create count by intercept column overall
  group_by(intercept) %>%
  mutate(
    count_by_int = n() 
  ) %>% 
  ungroup() %>%
  # Create count by intercept column for each main category
  group_by(main_category, intercept) %>%
  mutate(
    count_by_int_cat = n() 
  ) %>% 
  relocate(c("count_by_int", "count_by_int_cat"), .after = intercept) 
  
# Merge geographical data to categorical data and create counts by zip code 
# column  
cat_geo <- add_data %>% left_join(., count_data, by = "program") %>%
  # Count by zipcode overall
  group_by(zipcode) %>%
  mutate(
    count_by_zip = n()
  ) %>%
  ungroup() %>%
  # Count by zipcode for each main category
  group_by(main_category, zipcode) %>%
  mutate(
    count_by_zip_cat = n()
  ) %>%
  ungroup() %>% 
  as.data.frame()
```


## Prepare the data, ensuring it's in the appropriate format for the plots
### Create lists of factor levels for each main category
The factor levels are the subcategories ordered based on the count of programs 
within each category.They will include the full list of categories, not just the
categories in the actual data, so that if a category has no programs, it will
still show up in the plot of the subcategories as having a count of 0 instead
of not appearing at all.
```{r, include=FALSE}
# Create factor levels for intercepts
int_levels <- levels(cat_geo$intercept)
```

```{r}
main_cats <- cat_list %>% select(main_category) %>% distinct() %>% unlist()

mc_levels_list <- list()

# For each main category ...
for(mc in main_cats){
  # From the actual data ...
  dat <- cat_geo %>% filter(main_category == mc) %>%
    # Add count of programs in each intercept and sort the intercepts by 
    # the counts
    select(sub_category) %>% 
    add_count(sub_category, sort = TRUE) %>% select(sub_category) %>% 
    distinct() %>%
    as.vector() %>% unlist()
  # From the full list of categories ...
  cats <- cat_list %>% filter(main_category == mc) %>% 
    # Create a list of all the existing sub_categories
    select(sub_category) %>%
    as.vector() %>% unlist()
  # Combine the two lists, allowing only one of each sub_category to be present
  # in the combined list
  ml <- list(union(dat, cats))
  # Iteratively fill the initialized list with each list for each main category
  mc_levels_list <- append(mc_levels_list, ml)
}
# Name each nested list of subcategories by the associated main category
names(mc_levels_list) <- main_cats
```

### Apply created factor level lists, text, labels, select columns and convert df to sf

```{r}
# intercept levels
int_levels <- levels(cat_geo$intercept)
```

```{r, echo=FALSE}
sub_plot_prep <- function(main_category){
  # Grab the list of subcategory factor levels for the specified main category 
  # from the large list
  cat_levels <- mc_levels_list[[main_category]]
  
  # Filter the programs belonging to each main category
  prepped_data <- cat_geo %>% filter(main_category == {{main_category}}) %>% 
    # select data columns that will be included in the dashboard
    select(program, agency, main_category, count_by_main, sub_category, 
           count_by_sub, intercept, intercept_code, count_by_int, 
           count_by_int_cat, zipcode, count_by_zip, count_by_zip_cat, lng, lat, 
           geometry) %>% 
    group_by(sub_category) %>% 
    mutate(
      # Order the subcategories based on the count of programs
      sub_category = factor(sub_category,
                            levels = rev(cat_levels))
      )
  # Arrange the subcategories by count
  text_labels <-table(prepped_data["sub_category"]) %>% as.data.frame() %>% rename(
    count = Freq
  ) %>% arrange(sub_category) %>%
    arrange(desc(count)) %>%
    # Create labels
    mutate(
      text_label = paste("Need sub-category: ", sub_category, "<br>Programs: ", count) 
    )
  
  # Apply factor levels
  text_labels <- text_labels[match(cat_levels, text_labels[["sub_category"]]),] %>% 
    select(text_label) %>%
    as.vector() %>% unlist() %>% unname()
  
  # Arrange the intercept categories by count
  int_text_labels <-table(prepped_data["intercept"]) %>% as.data.frame() %>% rename(
    count = Freq
  ) %>% arrange(intercept) %>%
    arrange(desc(count)) %>%
    # Create labels
    mutate(
      int_text_label = paste("Intercept: ", intercept, "<br>Programs: ", count) 
    )
  # Apply factor levels
  int_text_labels <- int_text_labels[match(int_levels, int_text_labels[["intercept"]]),] %>% 
    select(int_text_label) %>%
    as.vector() %>% unlist() %>% unname()
  
  # Combine text labels with prepped data
  prepped_data <- prepped_data %>% 
    mutate(
      sub_cat_text = factor(sub_category, levels = rev(cat_levels), 
                            labels = rev(text_labels)),
      int_cat_text = paste("Intercept: ", intercept, "<br>Programs: ", count_by_int_cat),
      int_cat_text  = factor(int_cat_text,
                             levels = rev(int_levels))
      ) %>% sf::st_as_sf()
  
  prepped_data
}
```

```{r, echo=FALSE}
sub_plot_prep <- function(main_category){
  # Grab the list of subcategory factor levels for the specified main category 
  # from the large list
  cat_levels <- mc_levels_list[[main_category]]
  
  # Filter the programs belonging to each main category
  prepped_data <- cat_geo %>% filter(main_category == {{main_category}}) %>% 
    # select data columns that will be included in the dashboard
    select(program, agency, main_category, count_by_main, sub_category, 
           count_by_sub, intercept, intercept_code, count_by_int, 
           count_by_int_cat, zipcode, count_by_zip, count_by_zip_cat, lng, lat, 
           geometry) %>% 
    group_by(sub_category) %>% 
    mutate(
      # Order the subcategories based on the count of programs
      sub_category = factor(sub_category,
                            levels = rev(cat_levels))
      )
  # Arrange the subcategories by count
  text_labels <-table(prepped_data["sub_category"]) %>% as.data.frame() %>% rename(
    count = Freq
  ) %>% arrange(sub_category) %>%
    arrange(desc(count)) %>%
    # Create labels
    mutate(
      text_label = paste("Need sub-category: ", sub_category, "<br>Programs: ", count) 
    )
  
  # Apply factor levels
  text_labels <- text_labels[match(cat_levels, text_labels[["sub_category"]]),] %>% 
    select(text_label) %>%
    as.vector() %>% unlist() %>% unname()
  
  # Create intercept labels and arrange the intercept categories by count
  int_text_labels <-table(prepped_data["intercept"]) %>% as.data.frame() %>% rename(
    count = Freq
  ) %>% arrange(intercept) %>%
    arrange(desc(count)) %>%
    # Create labels
    mutate(
      int_text_label = paste("Intercept: ", intercept, "<br>Programs: ", count) 
    ) %>% 
    select(int_text_label) %>% unlist() %>% unname()

  # Combine text labels with prepped data
  prepped_data <- prepped_data %>%
    mutate(
      sub_cat_text = factor(sub_category, levels = rev(cat_levels),
                            labels = rev(text_labels)),
      int_cat_text = paste("Intercept: ", intercept, "<br>Programs: ", count_by_int_cat),
      int_cat_text  = factor(int_cat_text,
                             levels = rev(int_text_labels))
      ) %>% 
    sf::st_as_sf()

  prepped_data
  
}
```



```{r}
# Create names for each main category dataframe
mc_df_names <- c("bhs", "sut", "ha", "hcs", "cpi", "laa", "lds", "res", "cea" )

# Apply sub_plot_prep function to all the main categories
df_list <- lapply(names(mc_levels_list), sub_plot_prep) 

# Apply data frame names
names(df_list) <- mc_df_names

# Split list of data frames
list2env(df_list, globalenv())
```

### Prepare the full data not broken down by main categories
#### Create the factor list
```{r}
# From the actual data ...
dat <- cat_geo %>% 
  # Add count of programs in each  main category and sort the main categories by 
  # the counts
  select(main_category) %>% 
  add_count(main_category, sort = TRUE) %>% select(main_category) %>% 
  mutate(
    main_category = case_when(is.na(main_category) ~ "Not Applicable",
    TRUE                                           ~ main_category)
  ) %>%
  distinct() %>%
  as.vector() %>% unlist()%>% unname()

# From the full list of categories ...
cats <- cat_list %>% 
  # Create a list of all the existing subcategories
  select(main_category) %>% distinct() %>%
  as.vector() %>% unlist() %>% unname()
# Get main categories in full list not in the data
only_cats <- list(setdiff(cats, dat)) %>% as.vector() %>% unlist()
# Add these categories so that the last category is the "NA" category
main_cat_list <- append(dat, only_cats, after = 6)
```

#### Apply the factor list and add labels
```{r}
prepped_mc_data <- cat_geo %>%
  # select data columns that will be included in the dashboard
  select(program, agency, main_category, count_by_main, sub_category, 
         intercept, intercept_code, count_by_int, 
         count_by_int_cat, zipcode, count_by_zip, count_by_zip_cat, lng, lat, 
         geometry) %>% 
  group_by(main_category) %>% 
  mutate(
    # Convert "NA" to "Not Applicable
    main_category = case_when(is.na(main_category) ~ "Not Applicable",
    TRUE                                           ~ main_category),
    # Order the main category levels based on the count of programs
    main_category = factor(main_category,
                          levels = rev(main_cat_list))
    )
# Arrange the main categories by count
text_labels <-table(prepped_mc_data["main_category"]) %>% as.data.frame() %>% rename(
  count = Freq
) %>% arrange(main_category) %>%
  arrange(desc(count)) %>%
  # Create labels
  mutate(
    text_label = paste("Need category: ", main_category, "<br>Programs: ", count) 
  )

# Apply factor levels
text_labels <- text_labels[match(main_cat_list, text_labels[["main_category"]]),] %>% 
  select(text_label) %>%
  as.vector() %>% unlist() %>% unname()

# Create intercept labels and arrange the intercept categories by count
int_text_labels <-table(prepped_mc_data["intercept"]) %>% as.data.frame() %>% rename(
  count = Freq
) %>% arrange(intercept) %>%
  arrange(desc(count)) %>%
  # Create labels
  mutate(
    int_text_label = paste("Intercept: ", intercept, "<br>Programs: ", count) 
  ) %>% 
  select(int_text_label) %>% unlist() %>% unname()

# Combine text labels with prepped data
all <- prepped_mc_data %>% 
  mutate(
    main_cat_text = factor(main_category, levels = rev(main_cat_list), 
                          labels = rev(text_labels)),
    int_cat_text = paste("Intercept: ", intercept, "<br>Programs: ", count_by_int),
    int_cat_text  = factor(int_cat_text,
                           levels = rev(int_text_labels))
    ) %>% sf::st_as_sf()
```

# Save data
```{r}
path <- here::here("data", "prepped_data.RData")
save(all, bhs, sut, ha, hcs, cpi, laa, lds, res, cea, file = path)
```

