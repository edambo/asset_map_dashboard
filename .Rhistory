labels = rev(text_labels)),
int_cat_text = paste("Intercept: ", intercept, "<br>Program: ", count_by_int_cat),
int_cat_text  = factor(int_cat_text,
levels = rev(int_levels))
) %>% sf::st_as_sf()
prepped_data
}
# Create names for each main category dataframe
mc_df_names <- c("bhs", "sut", "ha", "hcs", "cpi", "laa", "lds", "res", "cea" )
# Apply sub_plot_prep function to all the main categories
df_list <- lapply(names(mc_levels_list), sub_plot_prep)
# Apply data frame names
names(df_list) <- mc_df_names
# Split list of data frames
list2env(df_list, globalenv())
View(bhs)
mc_levels_list_int <- list()
# For each main category ...
for(mc in main_cats){
# From the actual data ...
dat <- cat_geo %>% filter(main_category == mc) %>%
# Add count of programs in each intercept and sort the intercepts by
# the counts
select(intercept) %>%
add_count(intercept, sort = TRUE) %>% select(intercept) %>%
distinct() %>%
as.vector() %>% unlist()
# From the full list of categories ...
cats <- cat_list %>% filter(main_category == mc) %>%
# Create a list of all the existing intercepts
select(intercept) %>%
as.vector() %>% unlist()
# Combine the two lists, allowing only one of each intercept to be present
# in the combined list
ml <- list(union(dat, cats))
# Iteratively fill the initialized list with each list for each main category
mc_levels_list_int <- append(mc_levels_list, ml)
}
View(cat_data)
View(cat_list)
# Arrange the intercept categories by count
int_text_labels <-table(prepped_mc_data["intercept"]) %>% as.data.frame() %>% rename(
count = Freq
) %>% arrange(intercept) %>%
arrange(desc(count)) %>%
# Create labels
mutate(
int_text_label = paste("Intercept: ", intercept, "<br>Program: ", count)
)
prepped_mc_data <- cat_geo %>%
# select data columns that will be included in the dashboard
select(program, agency, main_category, count_by_main, sub_category,
intercept, intercept_code, count_by_int,
count_by_int_cat, zipcode, count_by_zip, count_by_zip_cat, lng, lat,
geometry) %>%
group_by(main_category) %>%
mutate(
# Convert "NA" to "Not Applicable
main_category = case_when(is.na(main_category) ~ "Not Applicable",
TRUE                                           ~ main_category),
# Order the main category levels based on the count of programs
main_category = factor(main_category,
levels = rev(main_cat_list))
)
library(here)
library(dplyr)
library(readxl)
library(tidyr)
library(zipcodeR)
library(tigris)
library(sf)
library(forcats)
# Program category sheet
cat_data <- readxl::read_xlsx(
here::here("data", "community_resources_map_data.xlsx"),
sheet = "program_categories")
# Program information sheet
add_data <- readxl::read_xlsx(
here::here("data", "community_resources_map_data.xlsx"),
sheet = "program_info")
# Demographics sheet
demo_data <- readxl::read_xlsx(
here::here("data", "community_resources_map_data.xlsx"),
sheet = "demographics")
# Lists of main and subcategories
cat_list <- read.csv(here::here("data", "all_categories.csv")) %>%
mutate(
main_category = gsub("\n", "", main_category)
)
add_data <- add_data %>%
select(program, address) %>%
# Split the address data to obtain separate columns for each element
tidyr::separate_wider_delim(address, delim = ",",
names = c("street_address", "city", "state",
"zipcode")) %>%
# Remove blank space next to zip codes.
mutate(
zipcode = gsub(" ", "", zipcode, fixed = TRUE)
)
# Generate logitude and latitude data for each zipcode
long_lat <- geocode_zip(add_data$zipcode)
# Manually add missing long and lat values for zipcode 78767
long_lat[4,2] <- 30.269806126148378
long_lat[4,3] <- -97.73965108465788
# Combine the long lat data with the rest of the address data
add_data <- add_data %>% left_join(., long_lat, by = "zipcode")
# Get boundary shape data for the zipcodes
add_data <- zctas(cb = T, starts_with = "787", class = "sf", year = 2020) %>%
select(zipcode = starts_with("ZCTA"), geometry) %>% right_join(., add_data,
by = "zipcode"
) %>%
relocate(zipcode, .after = "state")
cat_data <- cat_data %>%
rowwise() %>%
mutate(
# Make each category string have 16 characters per line
f_main_category = paste(strwrap(main_category, 16), collapse="\n"),
# Remove new line spaces
sub_category = gsub("\r\n", "", sub_category),
# Reorder factor levels of intercepts
intercept = fct_reorder(intercept, intercept_code)
)
count_data <- cat_data %>%
# Create count by main category column
group_by(main_category) %>%
mutate(
count_by_main = n()
) %>% relocate(count_by_main, .after = main_category) %>%
# Create count by subcategory column
group_by(main_category, sub_category) %>%
mutate(
count_by_sub = n()
) %>% relocate(count_by_sub, .after = sub_category) %>%
ungroup() %>%
# Create count by intercept column overall
group_by(intercept) %>%
mutate(
count_by_int = n()
) %>%
ungroup() %>%
# Create count by intercept column for each main category
group_by(main_category, intercept) %>%
mutate(
count_by_int_cat = n()
) %>%
relocate(c("count_by_int", "count_by_int_cat"), .after = intercept)
# Merge geographical data to categorical data and create counts by zip code
# column
cat_geo <- add_data %>% left_join(., count_data, by = "program") %>%
# Count by zipcode overall
group_by(zipcode) %>%
mutate(
count_by_zip = n()
) %>%
ungroup() %>%
# Count by zipcode for each main category
group_by(main_category, zipcode) %>%
mutate(
count_by_zip_cat = n()
) %>%
ungroup() %>%
as.data.frame()
# Create factor levels for intercepts
int_levels <- levels(cat_geo$intercept)
mc_levels_list_int <- list()
# For each main category ...
for(mc in main_cats){
# From the actual data ...
dat <- cat_geo %>% filter(main_category == mc) %>%
# Add count of programs in each intercept and sort the intercepts by
# the counts
select(intercept) %>%
add_count(intercept, sort = TRUE) %>% select(intercept) %>%
distinct() %>%
as.vector() %>% unlist()
# From the full list of categories ...
cats <- cat_list %>% filter(main_category == mc) %>%
# Create a list of all the existing intercepts
select(intercept) %>%
as.vector() %>% unlist()
# Combine the two lists, allowing only one of each intercept to be present
# in the combined list
ml <- list(union(dat, cats))
# Iteratively fill the initialized list with each list for each main category
mc_levels_list <- append(mc_levels_list, ml)
}
library(here)
library(dplyr)
library(readxl)
library(tidyr)
library(zipcodeR)
library(tigris)
library(sf)
library(forcats)
# Program category sheet
cat_data <- readxl::read_xlsx(
here::here("data", "community_resources_map_data.xlsx"),
sheet = "program_categories")
# Program information sheet
add_data <- readxl::read_xlsx(
here::here("data", "community_resources_map_data.xlsx"),
sheet = "program_info")
# Demographics sheet
demo_data <- readxl::read_xlsx(
here::here("data", "community_resources_map_data.xlsx"),
sheet = "demographics")
# Lists of main and subcategories
cat_list <- read.csv(here::here("data", "all_categories.csv")) %>%
mutate(
main_category = gsub("\n", "", main_category)
)
add_data <- add_data %>%
select(program, address) %>%
# Split the address data to obtain separate columns for each element
tidyr::separate_wider_delim(address, delim = ",",
names = c("street_address", "city", "state",
"zipcode")) %>%
# Remove blank space next to zip codes.
mutate(
zipcode = gsub(" ", "", zipcode, fixed = TRUE)
)
# Generate logitude and latitude data for each zipcode
long_lat <- geocode_zip(add_data$zipcode)
# Manually add missing long and lat values for zipcode 78767
long_lat[4,2] <- 30.269806126148378
long_lat[4,3] <- -97.73965108465788
# Combine the long lat data with the rest of the address data
add_data <- add_data %>% left_join(., long_lat, by = "zipcode")
# Get boundary shape data for the zipcodes
add_data <- zctas(cb = T, starts_with = "787", class = "sf", year = 2020) %>%
select(zipcode = starts_with("ZCTA"), geometry) %>% right_join(., add_data,
by = "zipcode"
) %>%
relocate(zipcode, .after = "state")
cat_data <- cat_data %>%
rowwise() %>%
mutate(
# Make each category string have 16 characters per line
f_main_category = paste(strwrap(main_category, 16), collapse="\n"),
# Remove new line spaces
sub_category = gsub("\r\n", "", sub_category),
# Reorder factor levels of intercepts
intercept = fct_reorder(intercept, intercept_code)
)
count_data <- cat_data %>%
# Create count by main category column
group_by(main_category) %>%
mutate(
count_by_main = n()
) %>% relocate(count_by_main, .after = main_category) %>%
# Create count by subcategory column
group_by(main_category, sub_category) %>%
mutate(
count_by_sub = n()
) %>% relocate(count_by_sub, .after = sub_category) %>%
ungroup() %>%
# Create count by intercept column overall
group_by(intercept) %>%
mutate(
count_by_int = n()
) %>%
ungroup() %>%
# Create count by intercept column for each main category
group_by(main_category, intercept) %>%
mutate(
count_by_int_cat = n()
) %>%
relocate(c("count_by_int", "count_by_int_cat"), .after = intercept)
# Merge geographical data to categorical data and create counts by zip code
# column
cat_geo <- add_data %>% left_join(., count_data, by = "program") %>%
# Count by zipcode overall
group_by(zipcode) %>%
mutate(
count_by_zip = n()
) %>%
ungroup() %>%
# Count by zipcode for each main category
group_by(main_category, zipcode) %>%
mutate(
count_by_zip_cat = n()
) %>%
ungroup() %>%
as.data.frame()
# Create factor levels for intercepts
int_levels <- levels(cat_geo$intercept)
mc_levels_list_int <- list()
# For each main category ...
for(mc in main_cats){
# From the actual data ...
dat <- cat_geo %>% filter(main_category == mc) %>%
# Add count of programs in each intercept and sort the intercepts by
# the counts
select(intercept) %>%
add_count(intercept, sort = TRUE) %>% select(intercept) %>%
distinct() %>%
as.vector() %>% unlist()
# From the full list of categories ...
cats <- cat_list %>% filter(main_category == mc) %>%
# Create a list of all the existing intercepts
select(intercept) %>%
as.vector() %>% unlist()
# Combine the two lists, allowing only one of each intercept to be present
# in the combined list
ml <- list(union(dat, cats))
# Iteratively fill the initialized list with each list for each main category
mc_levels_list <- append(mc_levels_list, ml)
}
library(here)
library(dplyr)
library(flextable)
library(officer)
library(tidyr, include.only = "pivot_longer")
library(stringr, include.only = "str_to_title")
library(knitr)
cat_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "program_categories") %>%
select(c(program, main_category, sub_category))
dem_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "demographics") %>%
left_join(., cat_data, by = "program") %>%
rename(
"demo_sub_cat" = "sub_cat"
)
# Filter behavioral health service rows
laa <- dem_data %>% filter(main_category == "Legal Aid Advocacy") %>%
# Group rows
group_by(program, demo_sub_cat, demographic)
# Split data frame into list of data frames by group
laa_table_list <- group_split(laa)
View(laa_table_list)
test <- laa_table_list[1]
View(test)
test <- laa_table_list[[1]]
test
View(laa_table_list)
list_to_output <- list(data1 = iris,
data2 = mtcars,
data3 = airquality)
View(list_to_output)
View(cat_data)
View(dem_data)
table(dem_data$program)
library(here)
library(dplyr)
library(flextable)
library(officer)
library(tidyr, include.only = "pivot_longer")
library(stringr, include.only = "str_to_title")
library(htmltools)
# library(knitr)
cat_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "program_categories") %>%
select(c(program, main_category, sub_category))
dem_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "demographics") %>%
left_join(., cat_data, by = "program") %>%
rename(
"demo_sub_cat" = "sub_cat"
)
# Filter "Pretrial DWI Diversion Program" rows
pddp <- dem_data %>% filter(program == "Pretrial DWI Diversion Program") %>%
# Group rows
group_by(program, demo_sub_cat, demographic)
# Split data frame into list of data frames by group
pddp_table_list <- group_split(pddp)
test <- pdd_table_list[[1]]
test <- pddp_table_list[[1]]
View(pddp_table_list)
View(test)
dem_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "demographics") %>%
left_join(., cat_data, by = "program") %>%
rename(
"demo_sub_cat" = "sub_cat"
) %>%
# Format percentage data
mutate(
across(
.cols = c(starts_with("fy") & !ends_with("_raw")),
.fns = paste0(.x, "%")
)
dem_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "demographics") %>%
left_join(., cat_data, by = "program") %>%
rename(
"demo_sub_cat" = "sub_cat"
) %>%
# Format percentage data
mutate(
across(
.cols = c(starts_with("fy") & !ends_with("_raw")),
.fns = ~paste0(.x, "%")
)
dem_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "demographics") %>%
left_join(., cat_data, by = "program") %>%
rename(
"demo_sub_cat" = "sub_cat"
) %>%
# Format percentage data
mutate(
across(
.cols = c(starts_with("fy") & !ends_with("_raw")),
.fns = ~case_when(
!is.na(.x) ~ paste0(.x, "%"),
TRUE       ~ .x
)
dem_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "demographics") %>%
left_join(., cat_data, by = "program") %>%
rename(
"demo_sub_cat" = "sub_cat"
) %>%
# Format percentage data
mutate(
across(
.cols = c(starts_with("fy") & !ends_with("_raw")),
.fns = ~case_when(
!is.na(.x) ~ "paste0(.x, "%")",
dem_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "demographics") %>%
left_join(., cat_data, by = "program") %>%
rename(
"demo_sub_cat" = "sub_cat"
) %>%
# Format percentage data
mutate(
across(
.cols = c(starts_with("fy") & !ends_with("_raw")),
.fns = ~case_when(
!is.na(.x) ~ "test",
TRUE       ~ .x
)
dem_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "demographics") %>%
left_join(., cat_data, by = "program") %>%
rename(
"demo_sub_cat" = "sub_cat"
) %>%
# Format percentage data
mutate(
across(
.cols = c(starts_with("fy") & !ends_with("_raw")),
.fns = ~case_when(
is.na(.x) == FALSE ~ paste0(.x, "%"),
TRUE               ~ .x
)
dem_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "demographics") %>%
left_join(., cat_data, by = "program") %>%
rename(
"demo_sub_cat" = "sub_cat"
) %>%
# Format percentage data
mutate(
across(
.cols = c(starts_with("fy") & !ends_with("_raw")),
.fns = ~case_when(
is.na(.x) == FALSE ~ "test",
TRUE               ~ .x
)
dem_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "demographics") %>%
left_join(., cat_data, by = "program") %>%
rename(
"demo_sub_cat" = "sub_cat"
) %>%
# Format percentage data
mutate(
across(
.cols = c(starts_with("fy") & !ends_with("_raw")),
.fns = ~case_when(
is.na(.) == FALSE ~ paste0(., "%"),
TRUE               ~ .
)
change <- mtcars[,-1] %>% mutate(across(.fns = ~ case_when(. <100 ~ 1,
.x ==100 ~ 0,
.x >100 ~ -1)))
dem_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "demographics") %>%
left_join(., cat_data, by = "program") %>%
rename(
"demo_sub_cat" = "sub_cat"
) %>%
# Format percentage data
mutate(
across(
.cols = c(starts_with("fy") & !ends_with("_raw")),
.fns = ~case_when(
!is.na(.x) ~ paste0(.x, "%"),
TRUE       ~ .x
)
dem_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "demographics") %>%
left_join(., cat_data, by = "program") %>%
rename(
"demo_sub_cat" = "sub_cat"
) %>%
# Format percentage data
mutate(
across(
.cols = c(starts_with("fy") & !ends_with("_raw")),
.fns = ~case_when(
!is.na(.x) ~ paste0(as.character(.x), "%"),
TRUE       ~ as.character(.x)
)
# Filter "Pretrial DWI Diversion Program" rows
pddp <- dem_data %>% filter(program == "Pretrial DWI Diversion Program") %>%
# Group rows
group_by(program, demo_sub_cat, demographic)
# Split data frame into list of data frames by group
pddp_table_list <- group_split(pddp)
test <- pddp_table_list[[1]]
# For each split, remove empty columns
for(df in pddp_table_list){
df %>% select(
-c(where(all(is.na)))
)
}
# For each split, remove empty columns
for(df in pddp_table_list){
df %>% select(
-c(where(all(is.na(.))))
)
}
