agency_description, service_name, service_aka,
service_description),
.fns = ~list(unique(unlist(.x)))
)
) %>%
rowwise() %>%
# Convert lists in each row  to strings
mutate(
across(
.cols = c(agency_name,  agency_aka,
agency_description, service_name, service_aka,
service_description),
.fns = ~paste(unlist(.x), collapse = " ")
)
) %>%
mutate(
agency_id,
c_text = paste(unlist(agency_name), unlist(agency_aka), unlist(agency_description),
unlist(service_name), unlist(service_aka), unlist(service_description),
collapse = " ")
) %>% select(agency_id, c_text)
match_count <- function(keyword_list, string, negate_list = neg_keywords){
# Initialize empty lists
count_list <- c()
negated_list <- c()
neg_count_list <- c()
for(k in keyword_list){
# Create negated keywords list
for(n in negate_list){
neg_phrase  <- toString(paste(n, k, collapse = " "))
negated_list <- append(negated_list, neg_phrase)
}
# Count presence of keywords and add counts to list
count <- str_count(tolower(string), k)
# count_u <- ifelse(count>0, 1,0)
# count_list <- append(count_list, count_u)
count_list <- append(count_list, count)
}
# Count presence of negated keywords and add counts to list
for(nk in negated_list){
neg_count <- str_count(tolower(string), nk)
neg_count_list <- append(neg_count_list, neg_count)
}
total_count <- sum(count_list)
total_neg_count <- sum(neg_count_list)
adjusted_count <- total_count - total_neg_count
adjusted_count
}
# mil_keywords, wm_keywords, child_keywords,
# dis_keywords, ani_keywords, imm_keywords, eld_keywords, dabi_keywords
uw_data_classify <- uw_data_c %>% rowwise() %>%
mutate(
bhs_count = match_count(bhs_keywords, c_text),
sut_count = match_count(sut_keywords, c_text),
ha_count = match_count(ha_keywords, c_text),
hcs_count = match_count(hcs_keywords, c_text),
cpi_count = match_count(cpi_keywords, c_text),
laa_count = match_count(laa_keywords, c_text),
lds_count = match_count(lds_keywords, c_text),
res_count = match_count(res_keywords, c_text),
cea_count = match_count(cea_keywords, c_text),
inc_count = match_count(inc_keywords, c_text),
fa_count = match_count(fa_keywords, c_text),
mil_count = match_count(mil_keywords, c_text),
wm_count = match_count(wm_keywords, c_text),
child_count = match_count(child_keywords, c_text),
dis_count = match_count(dis_keywords, c_text),
ani_count = match_count(ani_keywords, c_text),
imm_count = match_count(imm_keywords, c_text),
eld_count = match_count(eld_keywords, c_text),
dabi_count = match_count(dabi_keywords, c_text),
) %>%
mutate(
across(
.cols = c(ends_with("count")),
.fns = ~ case_when(
.x == 0         ~ "Not likely",
.x == 1         ~ "Possibly",
.x > 1          ~ "Likely"
),
.names = "{col}_likelihood"
)
) %>%
rename_with(
~gsub("_count", "", .),
ends_with("likelihood")
) %>%
select(sort(names(.))) %>%
relocate(c_text, .before = "ani_count")
View(uw_data_classify)
library(openxlsx)
wb <- loadWorkbook(path)
path <-  here::here("data", "united_way_data.xlsx")
wb <- loadWorkbook(path)
writeData(wb, sheet = "agency_classifications", uw_data_classify, colNames = F)
write.xlsx(uw_data_classify, path, sheetName = "classified_agencies", append = TRUE)
library(xlsx)
uw_agency <- xlsx::read.xlsx(
path,
sheet = "Agency")
uw_agency <- xlsx::read.xlsx(
path,
sheetName = "Agency")
options(java.parameters = "-Xmx1000m")
library(rJava)
library(xlsx)
uw_agency <- xlxx::read.xlsx(
path,
sheetName = "Agency")
uw_agency <- xlsx::read.xlsx(
path,
sheetName = "Agency")
options(java.parameters = "-Xmx7000m")
library(rJava)
library(xlsx)
uw_agency <- xlsx::read.xlsx(
path,
sheetName = "Agency")
agency_d <- readxl::read_xlsx(
path,
sheet = "Agency")
service_d <- readxl::read_xlsx(
path,
sheet = "Service")
site_d <- readxl::read_xlsx(
path,
sheet = "Site")
# Create a blank workbook
work_book <- createWorkbook()
# Add some sheets to the workbook
addWorksheet(work_book, "Agency")
detach("package:xlsx", unload = TRUE)
library(here)
library(dplyr)
library(readxl)
library(janitor)
library(stringdist)
library(stringr)
library(openxlsx)
path <-  here::here("data", "united_way_data.xlsx")
# United Way Data
uw_agency <- readxl::read_xlsx(
path,
sheet = "Agency") %>%
clean_names() %>% remove_empty("cols")
uw_service <- readxl::read_xlsx(
path,
sheet = "Service") %>%
clean_names() %>% remove_empty("cols")
uw_site <- readxl::read_xlsx(
path,
sheet = "Site") %>%
clean_names() %>% remove_empty("cols")
# # Lists of main and subcategories
# cat_list <- read.csv(here::here("data", "all_categories.csv")) %>%
#   mutate(
#     main_category = gsub("\n", "", main_category)
#   )
# Lists of categorizing keywords
load(here::here("data", "keyword_lists.RData"))
agency <- uw_agency %>%
select(agency_id, contains("name"), contains("aka"), contains("description"),
contains("websiteurl"), (contains("address") &
(matches("_[0-9]") | contains("_city") |
contains("_county") | contains("_state")|
contains("_zip") | contains("_country") |
contains("_notes") | contains("itude")) &
!(matches("international") |
matches("mailing"))),
contains("_ada_acccess")
) %>%
# Rename columns to remove "agency_addressus" prefix
rename_with(~gsub("agency_addressus_", "", .),
everything())
service <- uw_service %>%
select(agency_id, service_id, service_site_service_site, service_system_name,
service_system_aka, service_system_description,
service_system_coverage_area_text, service_system_fee_structure,
service_custom_eligibility, service_custom_languages_offered,
(contains("option") & !(contains("record_owner") | contains("days"))),
service_status
)
site <- uw_site %>%
select(agency_id, site_id, site_system_name, contains("aka"),
contains("description"), contains("websiteurl"), (contains("address") &
(matches("_[0-9]") | contains("_city") |
contains("_county") | contains("_state")|
contains("_zip") | contains("_country") |
contains("_notes") | contains("itude")) &
!(matches("international") |
matches("mailing"))),
contains("_ada_acccess")
) %>%
# Rename columns to remove "agency_addressus" prefix
rename_with(~gsub("^(site_addressus_)", "", .),
everything())
uw_data <- agency %>% left_join(service, by = "agency_id") %>%
left_join(site, by = "agency_id") %>% distinct() %>%
rename_with(~gsub("_system", "", .),
everything())
uw_data_select <- uw_data %>%
select(agency_id, agency_name,  agency_aka,
agency_description, service_name, service_aka,
service_description
) %>% distinct()
uw_data_c <- uw_data_select %>%
group_by(agency_id) %>%
# Combine row values in a group
mutate(
across(
.cols = c(agency_name,  agency_aka,
agency_description, service_name, service_aka,
service_description),
.fns = ~as.list(str_split(paste(.x, collapse = ",", sep = ""), ",")[1])
)
) %>% distinct() %>%
# Convert lists in each row  to strings
mutate(
across(
.cols = c(agency_name,  agency_aka,
agency_description, service_name, service_aka,
service_description),
.fns = ~list(unique(unlist(.x)))
)
) %>%
rowwise() %>%
# Convert lists in each row  to strings
mutate(
across(
.cols = c(agency_name,  agency_aka,
agency_description, service_name, service_aka,
service_description),
.fns = ~paste(unlist(.x), collapse = " ")
)
) %>%
mutate(
agency_id,
c_text = paste(unlist(agency_name), unlist(agency_aka), unlist(agency_description),
unlist(service_name), unlist(service_aka), unlist(service_description),
collapse = " ")
) %>% select(agency_id, c_text)
match_count <- function(keyword_list, string, negate_list = neg_keywords){
# Initialize empty lists
count_list <- c()
negated_list <- c()
neg_count_list <- c()
for(k in keyword_list){
# Create negated keywords list
for(n in negate_list){
neg_phrase  <- toString(paste(n, k, collapse = " "))
negated_list <- append(negated_list, neg_phrase)
}
# Count presence of keywords and add counts to list
count <- str_count(tolower(string), k)
# count_u <- ifelse(count>0, 1,0)
# count_list <- append(count_list, count_u)
count_list <- append(count_list, count)
}
# Count presence of negated keywords and add counts to list
for(nk in negated_list){
neg_count <- str_count(tolower(string), nk)
neg_count_list <- append(neg_count_list, neg_count)
}
total_count <- sum(count_list)
total_neg_count <- sum(neg_count_list)
adjusted_count <- total_count - total_neg_count
adjusted_count
}
# mil_keywords, wm_keywords, child_keywords,
# dis_keywords, ani_keywords, imm_keywords, eld_keywords, dabi_keywords
uw_data_classify <- uw_data_c %>% rowwise() %>%
mutate(
bhs_count = match_count(bhs_keywords, c_text),
sut_count = match_count(sut_keywords, c_text),
ha_count = match_count(ha_keywords, c_text),
hcs_count = match_count(hcs_keywords, c_text),
cpi_count = match_count(cpi_keywords, c_text),
laa_count = match_count(laa_keywords, c_text),
lds_count = match_count(lds_keywords, c_text),
res_count = match_count(res_keywords, c_text),
cea_count = match_count(cea_keywords, c_text),
inc_count = match_count(inc_keywords, c_text),
fa_count = match_count(fa_keywords, c_text),
mil_count = match_count(mil_keywords, c_text),
wm_count = match_count(wm_keywords, c_text),
child_count = match_count(child_keywords, c_text),
dis_count = match_count(dis_keywords, c_text),
ani_count = match_count(ani_keywords, c_text),
imm_count = match_count(imm_keywords, c_text),
eld_count = match_count(eld_keywords, c_text),
dabi_count = match_count(dabi_keywords, c_text),
) %>%
mutate(
across(
.cols = c(ends_with("count")),
.fns = ~ case_when(
.x == 0         ~ "Not likely",
.x == 1         ~ "Possibly",
.x > 1          ~ "Likely"
),
.names = "{col}_likelihood"
)
) %>%
rename_with(
~gsub("_count", "", .),
ends_with("likelihood")
) %>%
select(sort(names(.))) %>%
relocate(c_text, .before = "ani_count")
agency_d <- readxl::read_xlsx(
path,
sheet = "Agency")
service_d <- readxl::read_xlsx(
path,
sheet = "Service")
site_d <- readxl::read_xlsx(
path,
sheet = "Site")
# Create a blank workbook
work_book <- createWorkbook()
# Add some sheets to the workbook
addWorksheet(work_book, "Agency")
addWorksheet(work_book, "Service")
addWorksheet(work_book, "Site")
addWorksheet(work_book, "agency_classification")
# Write the data to the sheets
writeData(work_book, sheet = "Agency", x = agency_d)
writeData(work_book, sheet = "Service", x = service_d)
writeData(work_book, sheet = "Site", x = site_d)
writeData(work_book, sheet = "agency_classification", x = uw_data_classify)
# Export the file
saveWorkbook(work_book, "classified_uw_data.xlsx")
View(uw_data_classify)
library(writexl)
writexl::write_xlsx(uw_data_classify, here::here("data", "classified_united_way_data.xlsx"))
# mil_keywords, wm_keywords, child_keywords,
# dis_keywords, ani_keywords, imm_keywords, eld_keywords, dabi_keywords
uw_data_classify <- uw_data_c %>% rowwise() %>%
mutate(
bhs_count = match_count(bhs_keywords, c_text),
sut_count = match_count(sut_keywords, c_text),
ha_count = match_count(ha_keywords, c_text),
hcs_count = match_count(hcs_keywords, c_text),
cpi_count = match_count(cpi_keywords, c_text),
laa_count = match_count(laa_keywords, c_text),
lds_count = match_count(lds_keywords, c_text),
res_count = match_count(res_keywords, c_text),
cea_count = match_count(cea_keywords, c_text),
inc_count = match_count(inc_keywords, c_text),
fa_count = match_count(fa_keywords, c_text),
mil_count = match_count(mil_keywords, c_text),
wm_count = match_count(wm_keywords, c_text),
child_count = match_count(child_keywords, c_text),
dis_count = match_count(dis_keywords, c_text),
ani_count = match_count(ani_keywords, c_text),
imm_count = match_count(imm_keywords, c_text),
eld_count = match_count(eld_keywords, c_text),
dabi_count = match_count(dabi_keywords, c_text),
) %>%
mutate(
across(
.cols = c(ends_with("count")),
.fns = ~ case_when(
.x == 0         ~ "Not likely",
.x == 1         ~ "Possibly",
.x > 1          ~ "Likely"
),
.names = "{col}_likelihood"
)
) %>%
rename_with(
~gsub("_count", "", .),
ends_with("likelihood")
) %>%
select(sort(names(.))) %>%
select(-c(c_text))
writexl::write_xlsx(uw_data_classify, here::here("data", "classified_united_way_data.xlsx"))
col_names <- cbind(names(uw_data_classify))
View(col_names)
uw_data_c <- uw_data_select %>%
group_by(agency_id) %>%
# Combine row values in a group
mutate(
across(
.cols = c(agency_name,  agency_aka,
agency_description, service_name, service_aka,
service_description),
.fns = ~as.list(str_split(paste(.x, collapse = ",", sep = ""), ",")[1])
)
) %>% distinct() %>%
# Convert lists in each row  to strings
mutate(
across(
.cols = c(agency_name,  agency_aka,
agency_description, service_name, service_aka,
service_description),
.fns = ~list(unique(unlist(.x)))
)
) %>%
rowwise() %>%
# Convert lists in each row  to strings
mutate(
across(
.cols = c(agency_name,  agency_aka,
agency_description, service_name, service_aka,
service_description),
.fns = ~paste(unlist(.x), collapse = " ")
)
) %>%
mutate(
agency_id,
c_text = paste(unlist(agency_name), unlist(agency_aka), unlist(agency_description),
unlist(service_name), unlist(service_aka), unlist(service_description),
collapse = " ")
) %>% select(agency_id, agency_name, c_text)
match_count <- function(keyword_list, string, negate_list = neg_keywords){
# Initialize empty lists
count_list <- c()
negated_list <- c()
neg_count_list <- c()
for(k in keyword_list){
# Create negated keywords list
for(n in negate_list){
neg_phrase  <- toString(paste(n, k, collapse = " "))
negated_list <- append(negated_list, neg_phrase)
}
# Count presence of keywords and add counts to list
count <- str_count(tolower(string), k)
# count_u <- ifelse(count>0, 1,0)
# count_list <- append(count_list, count_u)
count_list <- append(count_list, count)
}
# Count presence of negated keywords and add counts to list
for(nk in negated_list){
neg_count <- str_count(tolower(string), nk)
neg_count_list <- append(neg_count_list, neg_count)
}
total_count <- sum(count_list)
total_neg_count <- sum(neg_count_list)
adjusted_count <- total_count - total_neg_count
adjusted_count
}
# mil_keywords, wm_keywords, child_keywords,
# dis_keywords, ani_keywords, imm_keywords, eld_keywords, dabi_keywords
uw_data_classify <- uw_data_c %>% rowwise() %>%
mutate(
bhs_count = match_count(bhs_keywords, c_text),
sut_count = match_count(sut_keywords, c_text),
ha_count = match_count(ha_keywords, c_text),
hcs_count = match_count(hcs_keywords, c_text),
cpi_count = match_count(cpi_keywords, c_text),
laa_count = match_count(laa_keywords, c_text),
lds_count = match_count(lds_keywords, c_text),
res_count = match_count(res_keywords, c_text),
cea_count = match_count(cea_keywords, c_text),
inc_count = match_count(inc_keywords, c_text),
fa_count = match_count(fa_keywords, c_text),
mil_count = match_count(mil_keywords, c_text),
wm_count = match_count(wm_keywords, c_text),
child_count = match_count(child_keywords, c_text),
dis_count = match_count(dis_keywords, c_text),
ani_count = match_count(ani_keywords, c_text),
imm_count = match_count(imm_keywords, c_text),
eld_count = match_count(eld_keywords, c_text),
dabi_count = match_count(dabi_keywords, c_text),
) %>%
mutate(
across(
.cols = c(ends_with("count")),
.fns = ~ case_when(
.x == 0         ~ "Not likely",
.x == 1         ~ "Possibly",
.x > 1          ~ "Likely"
),
.names = "{col}_likelihood"
)
) %>%
rename_with(
~gsub("_count", "", .),
ends_with("likelihood")
) %>%
select(sort(names(.))) %>%
select(-c(c_text))
# agency_d <- readxl::read_xlsx(
#   path,
#   sheet = "Agency")
# service_d <- readxl::read_xlsx(
#   path,
#   sheet = "Service")
# site_d <- readxl::read_xlsx(
#   path,
#   sheet = "Site")
# # Create a blank workbook
# work_book <- createWorkbook()
#
# # Add some sheets to the workbook
# addWorksheet(work_book, "Agency")
# addWorksheet(work_book, "Service")
# addWorksheet(work_book, "Site")
# addWorksheet(work_book, "agency_classification")
#
# # Write the data to the sheets
# writeData(work_book, sheet = "Agency", x = agency_d)
# writeData(work_book, sheet = "Service", x = service_d)
# writeData(work_book, sheet = "Site", x = site_d)
# writeData(work_book, sheet = "agency_classification", x = uw_data_classify)
#
# # Export the file
# saveWorkbook(work_book, "classified_uw_data.xlsx")
writexl::write_xlsx(uw_data_classify, here::here("data", "classified_united_way_data.xlsx"))
col_names <- cbind(names(uw_data_classify))
View(uw_data_classify)
