---
format: 
  dashboard
orientation: rows
scrolling: true 
---

<!-- # All {orientation="columns" scrolling="true"} -->

```{r, include = FALSE}
# Libraries
library(plotly)
# library(htmlwidgets) # to use the 'onRender' function
library(here)
library(dplyr)
library(ggplot2)
library(DT)
library(crosstalk)
library(forcats, include.only = c("fct_reorder"))
library(readxl)
library(tidyr)
library(leaflet)
library(zipcodeR)
library(tigris)
library(sf)
```

```{r, include=FALSE}
source(here::here("R", "month_name_year.R"))
```

<!-- Load data -->

```{r, include=FALSE}

cat_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "program_categories")
```


```{r, include=FALSE}
# Contact data
add_data <- readxl::read_xlsx(here::here("data", "community_resources_map_data.xlsx"), sheet = "program_info") %>% 
  select(program, address) %>%
   tidyr::separate_wider_delim(address, delim = ",", names = c("street_address", "city", "state", "zipcode")) %>%
  mutate(
    zipcode = gsub(" ", "", zipcode, fixed = TRUE)
  )

# Generate logitude and latitude data for each zipcode
long_lat <- geocode_zip(add_data$zipcode)

# Manually add missing long and lat values for zipcode 78767
long_lat[4,2] <- 30.269806126148378 
long_lat[4,3] <- -97.73965108465788


# Combine the long lat data with the rest of the address data
add_data <- add_data %>% left_join(., long_lat, by = "zipcode")
```


```{r, include=FALSE}
# Get boundary shape data for the zipcodes
add_data <- zctas(cb = T, starts_with = "787", class = "sf", year = 2020) %>%
  select(zipcode = starts_with("ZCTA"), geometry) %>% right_join(., add_data, by = "zipcode" ) %>%
  relocate(zipcode, .after = "state")
```


```{r, include=FALSE}
# Create factor levels for main categories
categories <- sort(c("Behavioral Health Services", "Substance Use Treatment", "Housing Assistance", "Healthcare Services", 
         "Community  Policing Initiatives", 
         "Legal Aid & Advocacy", "Legal Diversion Supports", "Reentry  Support", "Community Engagement & Awareness"))

cat <- c()
for(i in categories){
  cat_item <- paste(strwrap(i, 16), collapse="\n")
  cat <- append(cat, cat_item)
}
```


```{r, include=FALSE}
cat_data_f <- cat_data %>% 
  rowwise() %>%
  mutate(
    # Format main categories
    f_main_category = paste(strwrap(main_category, 16), collapse="\n"), 
    # f_main_category = factor(f_main_category,
    #                          levels = cat),
    sub_category = gsub("\r\n", "", sub_category)
  ) %>% 
  group_by(main_category) %>%
  mutate(
    count_by_main = n()
  ) %>% relocate(count_by_main, .after = main_category) %>%
  group_by(main_category, sub_category) %>%
  mutate(
    count_by_sub = n()
  ) %>% relocate(count_by_sub, .after = sub_category) %>%
  ungroup()
  
cat_data_sf <- add_data %>% left_join(., cat_data_f, by = "program") %>%
  group_by(zipcode) %>%
  mutate(
    count_by_zip = n()
  ) %>%
  ungroup()
```


```{r, include=FALSE}

all_cats <- read.csv(here::here("data", "all_categories.csv")) %>% 
  mutate(
    main_category = gsub("\n", "", main_category)
  )
```


<!-- Create lists of factor levels for each main category -->

```{r, include=FALSE}
main_cats <- all_cats %>% select(main_category) %>% distinct() %>% as.vector() %>% unlist()

mc_levels_list <- list()

for(mc in main_cats){
  dat <- cat_data_f %>% filter(main_category == mc) %>% 
  select(sub_category) %>% 
  add_count(sub_category, sort = TRUE) %>% select(sub_category) %>% distinct() %>%
    as.vector() %>% unlist()
  
  cats <- all_cats %>% filter(main_category == mc) %>% 
  select(sub_category) %>%
    as.vector() %>% unlist()
  
  ml <- list(union(dat, cats))
  
  mc_levels_list <- append(mc_levels_list, ml)
}

names(mc_levels_list) <- main_cats
```


# Behavioral Health Services {orientation="rows" scrolling="true"}

```{r, echo=FALSE}

shared_data <- cat_data_sf %>% filter(main_category == "Behavioral Health Services") %>% select(program, agency, main_category, count_by_main, sub_category, count_by_sub, zipcode, count_by_zip, lng, lat, geometry) %>% group_by(sub_category) %>% 
  mutate(
    sub_category = gsub("\r\n", "", sub_category),
    sub_category = factor(sub_category,
                          levels = rev(mc_levels_list[["Behavioral Health Services"]]))
    )
```

<!-- # Create the hovertext labels -->

```{r, include=FALSE}

text_labels <- table(shared_data$sub_category) %>% as.data.frame() %>% rename(
  sub_category = "Var1",
  count = Freq
) %>% arrange(sub_category) %>%
  arrange(desc(count)) %>%
  
  mutate(
    text_label = paste("Need sub-category: ", sub_category, "<br>Program: ", count) 
  )

text_labels <- text_labels[match(mc_levels_list[["Behavioral Health Services"]], text_labels$sub_category),] %>% 
  select(text_label) %>%
  as.vector() %>% unlist() %>% unname()
```

```{r, include = FALSE}

test <- shared_data %>% 
  mutate(
    sub_cat_text = factor(sub_category, levels = rev(mc_levels_list[["Behavioral Health Services"]]), 
                          labels = rev(text_labels))
    ) %>% sf::st_as_sf()
```


```{r, echo=FALSE}
# For crosstalk
shared_data_test <- SharedData$new(test, key = ~program)

```

## Row 

### Column{.tabset}
```{r, echo = FALSE}
#| title: By Subcategories
cols <- c("#003f5c",  "#2c4875", "#58508d", "#8a508f", "#bc5090", "#de5a79", "#ff6361", "#ff8531", "#ffa600")

r <- 12

bhs <- ggplot(shared_data_test, aes(y = sub_category,
                               text = paste(sub_cat_text)
                               )) +
  geom_bar(fill = "#003f5c") + 
  geom_text(aes(label = ..count..), stat = "count", 
            nudge_x = -0.2, color = "white") +
  scale_fill_discrete(drop=FALSE) +
  scale_y_discrete(drop = FALSE) + theme_classic() +
  theme(axis.ticks.x = element_blank(),
        axis.line = element_blank())




ggplotly(bhs, tooltip = c("text")) %>%
  layout(hoverlabel = list(align="left",
                           bgcolor = "#003f5c"),
         title = "Behavioral Health Services",
         margin = list(t = 50), 
         xaxis = list(showticklabels = FALSE,
                      title = FALSE,
                      range = list(0, r),
                      fixedrange = TRUE
                      ),
         yaxis = list(showticklabels = TRUE,
                     title = FALSE,
                     fixedrange = TRUE),
         showlegend = F) %>%
  style(hoverinfo = 'none', traces = c(1),
        textposition = "none") %>%
  highlight(on = "plotly_click", off = "plotly_doubleclick")

```



```{r, echo = FALSE}
#| title: By Zipcode

bscols(widths = c(12),
  list(
    filter_select("zip", "Zipcodes", shared_data_test, ~zipcode)
  )

)
                
```
### Column

```{r, echo=FALSE}
orig_data <- function(var){
  dat <- shared_data_test$origData() %>% as.data.frame()
  dat %>% select({{var}})
}

pal <- colorNumeric(
  palette = "Greens",
  domain = c(0:max(orig_data(data(count_by_zip)))))

austin <- c(-97.73996, 30.26734)

m <- shared_data_test %>% leaflet() %>% setView(lng = austin[1], lat = austin[2], zoom = 10)

m %>% addProviderTiles("CartoDB") %>%
  # add zip codes
  # addPolygons(fillColor = ~pal(count_by_sub),
  #             weight = 2,
  #             opacity = 1,
  #             color = "white",
  #             dashArray = "3",
  #             fillOpacity = 0.7,
  #             highlight = highlightOptions(weight = 2,
  #                                          color = "#666",
  #                                          dashArray = "",
  #                                          fillOpacity = 0.7,
  #                                          bringToFront = TRUE),
  #             label = ~zipcode) %>%
  # add legend
  addLegend(pal = pal, 
            values = ~count_by_zip, 
            opacity = 0.7, 
            title = "Number of Programs",
            position = "bottomright") %>%
  addCircleMarkers(lng = ~lng, lat = ~lat,
                   fillOpacity = 0.7, radius = 9,
                   fillColor = ~pal(count_by_zip),
                   color = ~"black",
                   stroke = FALSE,
                   label = ~zipcode)
```

## Row

```{r, echo = FALSE}
#| title: Data
dt_table <- shared_data_test %>%
  datatable(
    colnames = c("Program", "Agency",  "Need Category", 
                 "Count by Need category", "Sub Category", 
                 "Count by Sub-category", "Zipcode", "Count by Zipcode", "Lng",
                 "Lat", "Geometry", "Text label"),
    extensions = "Buttons",
    options = list(
      columnDefs = list(list(visible = FALSE, targets = c(9,10,11,12))),
      buttons = c("csv", "excel"),
      text = "Download",
      # paging = TRUE,
      # lengthMenu = c(5, 10, 25),
      # pageLength = 10,
      dom = "Bfrtip",
      scrollX = TRUE
    )
  )
dt_table
```






